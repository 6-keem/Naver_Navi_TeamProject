Index: app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicResponse.kt b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicResponse.kt
new file mode 100644
--- /dev/null	(date 1721751277864)
+++ b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicResponse.kt	(date 1721751277864)
@@ -0,0 +1,4 @@
+package com.hansung.sherpa.routegraphic
+
+class RouteGraphicResponse {
+}
\ No newline at end of file
Index: app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicService.kt b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicService.kt
new file mode 100644
--- /dev/null	(date 1721751277864)
+++ b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicService.kt	(date 1721751277864)
@@ -0,0 +1,13 @@
+package com.hansung.sherpa.routegraphic
+
+import com.hansung.sherpa.transit.TransitRouteRequest
+import okhttp3.ResponseBody
+import retrofit2.Call
+import retrofit2.http.Body
+import retrofit2.http.Header
+import retrofit2.http.POST
+
+class RouteGraphicService {
+    @POST("api/loadLane")
+    fun getRouteGraphicService(): Call<ResponseBody>
+}
\ No newline at end of file
Index: app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicManager.kt b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicManager.kt
new file mode 100644
--- /dev/null	(date 1721751277863)
+++ b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicManager.kt	(date 1721751277863)
@@ -0,0 +1,7 @@
+package com.hansung.sherpa.routegraphic
+
+import android.content.Context
+
+class RouteGraphicManager(val context: Context) {
+
+}
\ No newline at end of file
Index: app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicRequest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicRequest.kt b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicRequest.kt
new file mode 100644
--- /dev/null	(date 1721751277863)
+++ b/app/src/main/java/com/hansung/sherpa/routegraphic/RouteGraphicRequest.kt	(date 1721751277863)
@@ -0,0 +1,5 @@
+package com.hansung.sherpa.routegraphic
+
+class RouteGraphicRequest {
+
+}
\ No newline at end of file
Index: app/src/main/java/com/hansung/sherpa/routelist/RouteListAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hansung.sherpa.routelist\r\n\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.github.mikephil.charting.charts.BarChart\r\nimport com.github.mikephil.charting.charts.HorizontalBarChart\r\nimport com.github.mikephil.charting.components.Description\r\nimport com.github.mikephil.charting.components.Legend\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.components.YAxis\r\nimport com.github.mikephil.charting.data.BarData\r\nimport com.github.mikephil.charting.data.BarDataSet\r\nimport com.github.mikephil.charting.data.BarEntry\r\nimport com.hansung.sherpa.R\r\nimport com.hansung.sherpa.busarrivalinfo.BusArrivalInfoManager\r\nimport com.hansung.sherpa.busarrivalinfo.BusArrivalInfoRequest\r\nimport com.hansung.sherpa.busarrivalinfo.BusArrivalInfoResponse\r\nimport com.hansung.sherpa.convert.LegRoute\r\nimport com.hansung.sherpa.convert.PathType\r\n\r\n/**\r\n * RouteListRecyclerView의 Adapter를 정의한 클래스\r\n * ExpandableRecyclerView이다.\r\n * @param routeListModelList 'ExpandableRouteListModel' 참고 할 것\r\n */\r\nclass RouteListAdapter (var routeListModelList:MutableList<ExpandableRouteListModel>, var context: Context) :  RecyclerView.Adapter<RecyclerView.ViewHolder>() {\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        val row = routeListModelList[position]\r\n        when(row.type){\r\n            // 요약 정보 영역\r\n            ExpandableRouteListModel.PARENT -> {\r\n                (holder as RouteListParentViewHolder).remainingtime.text = row.parent.remainingTime\r\n                holder.arrivalTime.text = row.parent.arrivalTime\r\n                initStackBarChart(holder.remainingBar)\r\n                setData(holder.remainingBar, row.parent.legRouteList)\r\n\r\n                // TODO: 아이콘 회전이 작동하지 않는다.\r\n                // 확장 버튼 기능\r\n                holder.closeImage.setOnClickListener{\r\n                    if (row.isExpanded) {\r\n                        row.isExpanded = false\r\n                        collapseRow(position)\r\n                        holder.upArrowImage.visibility = View.GONE\r\n                        holder.closeImage.visibility = View.VISIBLE\r\n                    }else{\r\n                        row.isExpanded = true\r\n                        holder.upArrowImage.visibility = View.VISIBLE\r\n                        holder.closeImage.visibility = View.GONE\r\n                        expandRow(position)\r\n                    }\r\n                }\r\n                holder.upArrowImage.setOnClickListener{\r\n                    if(row.isExpanded){\r\n                        row.isExpanded = false\r\n                        collapseRow(position)\r\n                        holder.upArrowImage.visibility = View.GONE\r\n                        holder.closeImage.visibility = View.VISIBLE\r\n                    }\r\n                }\r\n                holder.layout.setOnClickListener{\r\n                    Log.d(\"explain\", \"요약 정보 클릭\")\r\n                    val busArrivalInfoRequest = setBusArrivalInfo(25,\"DJB8001793\",\"DJB30300002\")\r\n                    val transitRouteResponse = BusArrivalInfoManager(this.context).getBusArrivaInfoList2(busArrivalInfoRequest)\r\n                    Log.d(\"explain\", transitRouteResponse.header?.resultMsg.toString())\r\n                }\r\n            }\r\n            // 세부 정보 영역\r\n            ExpandableRouteListModel.CHILD -> {\r\n                (holder as RouteListChildViewHolder).transportNumber.text = row.child.transportNumber\r\n                holder.watingTime.text = row.child.watingTime\r\n                when(row.child.iconType){\r\n                    PathType.BUS -> holder.transportIcon.setImageResource(R.drawable.express_bus)\r\n                    PathType.SUBWAY -> holder.transportIcon.setImageResource(R.drawable.subway)\r\n                    PathType.EXPRESSBUS -> holder.transportIcon.setImageResource(R.drawable.express_bus)\r\n                    PathType.TRAIN -> holder.transportIcon.setImageResource(R.drawable.subway)\r\n                    else -> holder.transportIcon.setImageResource(R.drawable.walk)\r\n                }\r\n                holder.layout.setOnClickListener{\r\n                    Log.d(\"explain\", \"세부 정보 클릭\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // item 확장을 위한 함수\r\n    private fun expandRow(position: Int){\r\n        val row = routeListModelList[position]\r\n        var nextPosition = position\r\n        when (row.type) {\r\n            ExpandableRouteListModel.PARENT -> {\r\n                for(child in row.parent.detailRoute){\r\n                    routeListModelList.add(++nextPosition, ExpandableRouteListModel(ExpandableRouteListModel.CHILD, child))\r\n                }\r\n                notifyDataSetChanged()\r\n            }\r\n            ExpandableRouteListModel.CHILD -> {\r\n                notifyDataSetChanged()\r\n            }\r\n        }\r\n    }\r\n\r\n    // item 축소를 위한 함수\r\n    private fun collapseRow(position: Int){\r\n        val row = routeListModelList[position]\r\n        var nextPosition = position + 1\r\n        when (row.type) {\r\n            ExpandableRouteListModel.PARENT -> {\r\n                outerloop@ while (true) {\r\n                    if (nextPosition == routeListModelList.size || routeListModelList[nextPosition].type == ExpandableRouteListModel.PARENT) {\r\n                        break@outerloop\r\n                    }\r\n                    routeListModelList.removeAt(nextPosition)\r\n                }\r\n                notifyDataSetChanged()\r\n            }\r\n        }\r\n    }\r\n\r\n    // RecyclerView 뷰 홀더 항목은 parent 항목과 child 항목으로 구분된다.\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when(viewType) {\r\n            ExpandableRouteListModel.PARENT -> {RouteListParentViewHolder(LayoutInflater.from(parent.context).inflate(\r\n                R.layout.route_list_parent_item, parent, false))}\r\n\r\n            ExpandableRouteListModel.CHILD -> { RouteListChildViewHolder(LayoutInflater.from(parent.context).inflate(\r\n                R.layout.route_list_child_item, parent, false))  }\r\n\r\n            else -> {RouteListParentViewHolder(LayoutInflater.from(parent.context).inflate(\r\n                R.layout.route_list_parent_item, parent, false))}\r\n        }\r\n    }\r\n\r\n    override fun getItemViewType(position: Int): Int = routeListModelList[position].type\r\n    override fun getItemCount(): Int = routeListModelList.size\r\n\r\n    inner class RouteListParentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        internal var layout = itemView.findViewById<ConstraintLayout>(R.id.route_list_parent_container)\r\n        internal var remainingtime = itemView.findViewById<TextView>(R.id.remaining_time)\r\n        internal var arrivalTime = itemView.findViewById<TextView>(R.id.arrival_time)\r\n        internal var remainingBar = itemView.findViewById<HorizontalBarChart>(R.id.chart)\r\n        internal var closeImage = itemView.findViewById<ImageView>(R.id.close_arrow)\r\n        internal var upArrowImage = itemView.findViewById<ImageView>(R.id.up_arrow)\r\n    }\r\n\r\n    inner class RouteListChildViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        internal var layout = itemView.findViewById<ConstraintLayout>(R.id.route_list_parent_container)\r\n        internal var transportIcon = itemView.findViewById<ImageView>(R.id.transport_icon)\r\n        internal var transportNumber = itemView.findViewById<TextView>(R.id.transport_number)\r\n        internal var watingTime = itemView.findViewById<TextView>(R.id.wating_time)\r\n    }\r\n\r\n    // setDrawLabels 필요\r\n    fun initStackBarChart(barChart: HorizontalBarChart) {\r\n        // 변수 설정\r\n        val xAxis: XAxis = barChart.xAxis\r\n        val axisLeft: YAxis = barChart.axisLeft\r\n        val axisRight: YAxis = barChart.axisRight\r\n\r\n        // 두께 및 길이 설정\r\n        axisLeft.axisMinimum = 0f // 좌우 최소 길이\r\n        axisLeft.axisMaximum = 100f // 좌우 최대 길이\r\n        xAxis.axisMaximum = 1.5f // bar 두께\r\n\r\n        // 축 선 설정 (default = true)\r\n        xAxis.setDrawAxisLine(false)\r\n        axisLeft.setDrawAxisLine(false)\r\n        axisRight.setDrawAxisLine(false)\r\n\r\n        // 격자선 설정 (default = true)\r\n        xAxis.setDrawGridLines(false)\r\n        axisLeft.setDrawGridLines(false)\r\n        axisRight.setDrawGridLines(false)\r\n\r\n        // 라벨 설정 (default = true)\r\n        xAxis.setDrawLabels(false)\r\n        axisLeft.setDrawLabels(false)\r\n        axisRight.setDrawLabels(false)\r\n    }\r\n\r\n    // 차트 데이터 설정\r\n    private fun setData(barChart: HorizontalBarChart, legRouteList: MutableList<LegRoute>) {\r\n        // 막대(범례?)가 하나이므로 리스트에는 하나만 추가\r\n        val valueList = ArrayList<BarEntry>()\r\n\r\n        // TODO: 경로 개수만큼 경로 분할\r\n        val transportList:MutableList<Float> = mutableListOf()\r\n        for (i in legRouteList) {\r\n            transportList.add(100f/legRouteList.size)\r\n        }\r\n        valueList.add(BarEntry(0f, transportList.toFloatArray()))\r\n\r\n\r\n        // 바 색상 설정 (ColorTemplate.LIBERTY_COLORS) 리스트 별로 1대1 매칭\r\n        val barDataSet = BarDataSet(valueList, \"\") // 값 리스트와 타이틀 이름(\"\")을 인자로 함\r\n\r\n        // TODO: 타입 별로 색 지정\r\n        val colorList:MutableList<Int> = mutableListOf()\r\n\r\n        for(i in legRouteList){\r\n            val color = when(i.pathType){\r\n                PathType.BUS -> Color.GREEN\r\n                PathType.SUBWAY -> Color.BLUE\r\n                PathType.EXPRESSBUS -> Color.RED\r\n                PathType.TRAIN -> Color.DKGRAY\r\n                else -> Color.GRAY\r\n            }\r\n            colorList.add(color)\r\n        }\r\n        barDataSet.colors = colorList\r\n\r\n        val data = BarData(barDataSet)\r\n        data.setDrawValues(false)\r\n\r\n        barChart.data = data\r\n        barChart.description.isEnabled = false\r\n        barChart.legend.isEnabled = false\r\n        barChart.setScaleEnabled(false)\r\n        barChart.invalidate()\r\n    }\r\n}\r\n\r\n// 임시\r\nprivate fun setBusArrivalInfo(cityCode: Int, nodeId: String, routeId:String) = BusArrivalInfoRequest( cityCode = cityCode, nodeId = nodeId, routeId = routeId)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/hansung/sherpa/routelist/RouteListAdapter.kt b/app/src/main/java/com/hansung/sherpa/routelist/RouteListAdapter.kt
--- a/app/src/main/java/com/hansung/sherpa/routelist/RouteListAdapter.kt	(revision ce249b866b6386325e664e3a0e4b500d6e4f8aba)
+++ b/app/src/main/java/com/hansung/sherpa/routelist/RouteListAdapter.kt	(date 1721751277865)
@@ -27,6 +27,9 @@
 import com.hansung.sherpa.convert.LegRoute
 import com.hansung.sherpa.convert.PathType
 
+// 임시 샘플 데이터
+val tempBusArrivalInfoRequest = setBusArrivalInfo(25,"DJB8001793","DJB30300002")
+
 /**
  * RouteListRecyclerView의 Adapter를 정의한 클래스
  * ExpandableRecyclerView이다.
@@ -68,8 +71,7 @@
                 }
                 holder.layout.setOnClickListener{
                     Log.d("explain", "요약 정보 클릭")
-                    val busArrivalInfoRequest = setBusArrivalInfo(25,"DJB8001793","DJB30300002")
-                    val transitRouteResponse = BusArrivalInfoManager(this.context).getBusArrivaInfoList2(busArrivalInfoRequest)
+                    val transitRouteResponse = BusArrivalInfoManager(this.context).getBusArrivaInfoList2(tempBusArrivalInfoRequest)
                     Log.d("explain", transitRouteResponse.header?.resultMsg.toString())
                 }
             }
